package report;

import user.*;
import camp.*;
import errorhandling.InputExceptionHandler;
import inquiry.InquiryHandler;
import inquiry.StoreInquiry;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

/**
 * The CampCommitteeReport class represents a report generated by the camp committee, specifically listing
 * students and camp committee members attending a camp along with their details.
 *
 * 
 * @author Grp4
 * @version 1.0
 * @since 2023-11-24
 * 
 */
public class CampCommitteeReport extends Report {
    
     /**
     * Constructs a CampCommitteeReport object with the specified camp committee user.
     *
     * @param campcommittee The camp committee user generating the report.
     */
    public CampCommitteeReport(CampCommitteeUser campcommittee) {
    }

  /**
   * Generates a report listing students and camp committee members attending the camp along with their details.
   */
  public static void generateStudentsList(CampCommitteeUser campcommittee) {
    //get user input on camp and initialise storageReport
    Camp camp = campcommittee.getMemberOf();
    String campName = camp.getName();
    List <StoreReport> reports = new ArrayList<>();

    List<Map<StudentUser, String>> attendeeListAndRole = camp.getAttendeeListAndRole(); 
    for (Map<StudentUser, String> attendeeMap : attendeeListAndRole) { 
    for (Map.Entry<StudentUser, String> entry : attendeeMap.entrySet()) { 
      //List <StoreReport> reports = new ArrayList<>();

      StudentUser studentUser = entry.getKey(); 
      String role = entry.getValue(); 
      if (role.equals("attendee")){
        int points = 0;
        StoreReport report = new StoreReport(entry.getKey().getName(), studentUser.getFaculty(), "Student", campName, points);
        reports.add(report);
  
    }
      else{
        for (int i=0;i<camp.getCampCommitteeList().size();i++){
          StoreReport report = new StoreReport(camp.getCampCommitteeList().get(i).getUsername(), camp.getCampCommitteeList().get(i).getFaculty(), "Camp Committe Member", campName, camp.getCampCommitteeList().get(i).getPoints());
          reports.add(report);
        }
      }

        }
      }
      ReportHandler reporthandler = new ReportHandler("Attendeelist.txt");
      reporthandler.loadStudentsList(reports, camp);
    }
  
}